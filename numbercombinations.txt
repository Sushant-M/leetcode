class Solution {
   Map<String, String> map = new HashMap<String, String>() {{
    put("2", "abc");
    put("3", "def");
    put("4", "ghi");
    put("5", "jkl");
    put("6", "mno");
    put("7", "pqrs");
    put("8", "tuv");
    put("9", "wxyz");
    }};
    
    public List<String> letterCombinations(String digits) {
        List<String> ans = new ArrayList<String>();
        if(digits.length() == 0){
            return ans;
        }
        recurse(digits, 0, ans, "");
        return ans;
    }
    public void recurse(String digits, int index, List<String> ans, String curr){
        
        if(index == digits.length()){
            ans.add(curr);
            return;
        }
        String val = digits.substring(index,index+1);
        String to_add = map.get(val);
        
        for(int i=0; i<to_add.length(); i++){
            recurse(digits, index+1, ans, curr + to_add.charAt(i));
        }
    }
}